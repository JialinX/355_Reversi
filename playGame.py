from board import ReversiBoard
from reversi import AlphaBetaGenMove
import random
import time

BLACK = 'x' # player black
WHITE = 'o' # player white
EMPTY = '.'

#######################
'''
TODO:
1. ADD welcome and guide message in the very beginning


3. board.showboard also shows both scores
4. if a move is generated by computer, show move position

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
5. !!!provide pass option if no legal moves
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

6. !!!Documentation

8. update help menu with more intructions

'''
#######################

#class Cell:
    #chars ='bw' 
alphabet = 'abcdefghijklmnopqrstuvwxyz'
def showLegalMove(board, color):
    moves = board.getAllLegalMoves(color)
    if len(moves) == 0:
        print("You have no legal move!")
        return True
    else:
        allMoves = ""
        for each in moves:
            allMoves+=board.point2LetterPosition(each)+" "
        print("All legal moves for "+color+" are: ", allMoves, "\n")
        

def getUserColor():
    print("Do you wanna play against computer? (y/n)")
    print("If y(es), computer will play with you")
    print("If n(o), the board is just for testing or pvp use")
    pve = input(">> ")
    if pve in ["y", "yes"]:
        print("x goes first. o goes second")
        while True:
            choose = input("what color do you want to use? (x/o): ")
            if choose.lower() in ["o", "w", "white"]:
                return WHITE
            elif choose.lower() in ["x", "b", "black"]:
                return BLACK
            print("invalid input, please input again")
    elif pve in ["n", "no"]:
        return None
    else:
        print("invalid input, please input again")
        return getUserColor()
    
def showResult(board):
    winner = board.getWinner()
    if winner == "tie":
        "The game ties"
    else:
        print("The winner is:", winner, "with score of", board.getMark(winner))

def playCommand(board, position, alphabeta, commandColor, userColor, computerColor):

    moves = board.getAllLegalMoves(commandColor)
    if commandColor == computerColor:
        print("You cannot play as computer's color")
        return 
    
    if not moves:
        print("There is no legal moves for "+commandColor+". It has to pass\n")
        return
    
    if position in moves:
        board.play(commandColor, position)
        board.showBoard()
    else:
        print("\nInvalid position for "+commandColor+", please input again")
        allMoves = ""
        for each in moves:
            allMoves+=board.point2LetterPosition(each)+" "
        print("All legal moves are: ", allMoves, "\n")
        return
        
    if userColor == commandColor:
        _ , move = alphabeta.genMove(computerColor)
        # computer has no legal move:
        if not move:
            print("computer has no legal move, then computer passes")
            return
        board.play(computerColor, move)
        print("\ncomputer's tern:")
        board.showBoard()
        print("\ncomputer plays at", board.point2LetterPosition(move),"\n")        
        
def dealCommand(userInput, board, alphabeta, userColor, computerColor):
    commandLen = len(userInput.split())

    command = userInput.split()[0]
    if command =='h':
        board.printMenu()
        
    if command =='b':
        board.showBoard()
            
    elif command =='x':
        if commandLen != 2:
            print("Invalid command, plese input again.")
            return True
        
        position  = board.position2point(userInput.split()[1])
        playCommand(board, position, alphabeta, 'x', userColor, computerColor)
        #moves = board.getAllLegalMoves(BLACK)
        
        #if not moves:
            #print("There is no legal moves for x. x has to pass\n")
            #return True
        
        #if position in moves:
            #board.play(BLACK, position)
            #board.showBoard()
        #else:
            #print("\nInvalid position for x, please input again")
            #allMoves = ""
            #for each in moves:
                #allMoves+=board.point2LetterPosition(each)+" "
            #print("All legal moves are: ", allMoves, "\n")
            
        #if userColor == command:
            #_ , move = alphabeta.genMove(computerColor)
            #board.play(computerColor, move)
            #board.showBoard()
            #print("\ncomputer plays at", board.point2LetterPosition(move),"\n")            
            
    elif command =='o':
        if commandLen != 2:
            print("Invalid command, plese input again.")
            return True
        
        position  = board.position2point(userInput.split()[1])
        playCommand(board, position, alphabeta, 'o', userColor, computerColor)
        #moves = board.getAllLegalMoves(WHITE)
        
        #if not moves:
            #print("There is no legal moves for o. o has to pass\n")
            #return True
        
        #if position in moves:
            #board.play(WHITE, position)
            #board.showBoard()
        #else:
            #print("\nInvalid position for o, please input again")
            #allMoves = ""
            #for each in moves:
                #allMoves+=board.point2LetterPosition(each)+" "
            #print("All legal moves are: ", allMoves, "\n")
            
    elif command =='g':
        if commandLen != 2:
            print("Invalid command, plese input again.")
            return True        
        color = userInput.split()[1]
        value, move = alphabeta.genMove(color)
        print('The best move found by AlphaBeta is:', board.point2LetterPosition(move))
        
    elif command =='l':
        if commandLen != 2:
            print("Invalid command, plese input again.")
            return True        
        color = userInput.split()[1]
        showLegalMove(board, color)    
        
    elif command =='u':
        board.undo()
        board.showBoard()
        
    elif command =='q':
        print('\n ... Bye :)\n')    
        return False
    
    else:
        print("Invalid command, plese input again.")    
    
    
    return True
    
def main():
    print("add message here")
    board = ReversiBoard(8)
    board.initBoard()
    alphabeta = AlphaBetaGenMove(board)

    #score = {BLACK:2, WHITE:2}
 
    print()
    
    userColor = getUserColor()
    computerColor = board.getOptColor(userColor)
    board.printMenu()
    print()
    board.showBoard()
    print()
    # deal with first move if computer goes first
    if userColor == WHITE:
        _ , move = alphabeta.genMove(WHITE)
        board.play(WHITE, move)
        board.showBoard()
        print("\ncomputer plays at", board.point2LetterPosition(move),"\n")
        
    loop = True
    while loop:
        if board.isEnd():
            showResult(board)
            break 
        
        userInput = input("Command>> ")
        if userInput:
            loop = dealCommand(userInput, board, alphabeta, userColor, computerColor)
        


if __name__ == '__main__':
    main()
    
