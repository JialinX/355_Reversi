import unittest
import numpy
from board import ReversiBoard 
BLACK = 'x' # player black
WHITE = 'o' # player white
EMPTY = '.' # empty point
BORDER = '#' # border point

board = ReversiBoard(8)
class TestReversiBoard(unittest.TestCase):
    def test_getLegalMoves(self):
        self.assertRaises(AssertionError, board.getLegalMoves, "random") 
        # at start
        board.board = ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#', '.', '.', '.', 'o', 'x', '.', '.', '.', '#', '#', '.', '.', '.', 'x', 'o', '.', '.', '.', '#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#']
        self.assertCountEqual(board.getLegalMoves(BLACK), [34, 43, 56, 65])
        self.assertCountEqual(board.getLegalMoves(WHITE), [35, 46, 53, 64])
        # random state
        board.board = ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#', '.', '.', '.', 'x', '.', '.', '.', '.', '#', '#', '.', '.', '.', 'x', 'x', '.', '.', '.', '#', '#', '.', '.', 'o', 'o', 'o', '.', '.', '.', '#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#']
        self.assertCountEqual(board.getLegalMoves(BLACK),[62, 63, 64, 65, 66])
        self.assertCountEqual(board.getLegalMoves(WHITE), [24, 33, 35, 36])
        # when the board is full
        board.board = ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', 'o', 'o', 'o', 'o', 'o', 'o', 'x', 'x', '#', '#', 'x', 'x', 'o', 'o', 'o', 'o', 'x', 'x', '#', '#', 'x', 'x', 'o', 'x', 'x', 'o', 'x', 'x', '#', '#', 'x', 'x', 'o', 'o', 'x', 'x', 'o', 'x', '#', '#', 'x', 'x', 'o', 'o', 'x', 'o', 'x', 'x', '#', '#', 'x', 'x', 'x', 'o', 'x', 'x', 'o', 'x', '#', '#', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'o', '#', '#', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#']
        self.assertCountEqual(board.getLegalMoves(BLACK), [])
        self.assertCountEqual(board.getLegalMoves(WHITE), [])
        # when there's no legal move for black
        board.board = [ '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', 
                        '#', 'o', 'o', 'o', 'o', 'o', 'o', 'x', 'o', '#', 
                        '#', 'o', 'x', 'o', 'o', 'o', 'o', 'x', 'o', '#', 
                        '#', 'o', 'x', 'o', 'x', 'x', 'o', 'o', 'o', '#', 
                        '#', 'o', 'x', 'o', 'o', 'x', 'x', 'o', 'o', '#', 
                        '#', 'o', 'o', 'o', 'o', 'o', 'o', 'o', '.', '#', 
                        '#', 'o', 'x', 'x', 'o', 'x', 'x', 'o', 'o', '#', 
                        '#', 'o', 'x', 'x', 'x', 'x', 'o', 'x', 'o', '#', 
                        '#', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', '#', 
                        '#', '#', '#', '#', '#', '#', '#', '#', '#', '#']
        self.assertCountEqual(board.getLegalMoves(BLACK), [])
        # when there's no legal move for white
        board.board = [ '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', 
                        '#', 'x', 'x', 'x', 'o', 'o', 'x', 'x', 'o', '#', 
                        '#', 'x', 'x', 'x', 'o', 'x', 'o', 'x', 'o', '#', 
                        '#', 'x', 'x', 'x', 'x', 'x', 'o', 'o', 'o', '#', 
                        '#', 'x', 'x', '.', 'x', 'x', 'x', 'x', 'x', '#', 
                        '#', 'x', 'x', 'x', 'x', 'o', 'o', 'o', 'x', '#', 
                        '#', 'x', 'x', 'x', 'o', 'x', 'x', 'o', 'o', '#', 
                        '#', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'o', '#', 
                        '#', 'x', 'x', 'x', 'o', 'o', 'o', 'x', 'o', '#', 
                        '#', '#', '#', '#', '#', '#', '#', '#', '#', '#']
        self.assertCountEqual(board.getLegalMoves(WHITE), [])
        

    def test_noMovesForBoth(self):
        # when it starts
        board.board = ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#', '.', '.', '.', 'o', 'x', '.', '.', '.', '#', '#', '.', '.', '.', 'x', 'o', '.', '.', '.', '#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#']
        self.assertEqual(board.noMovesForBoth(), False)
        # when the board is full
        board.board = ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', 'o', 'o', 'o', 'o', 'o', 'o', 'x', 'x', '#', '#', 'x', 'x', 'o', 'o', 'o', 'o', 'x', 'x', '#', '#', 'x', 'x', 'o', 'x', 'x', 'o', 'x', 'x', '#', '#', 'x', 'x', 'o', 'o', 'x', 'x', 'o', 'x', '#', '#', 'x', 'x', 'o', 'o', 'x', 'o', 'x', 'x', '#', '#', 'x', 'x', 'x', 'o', 'x', 'x', 'o', 'x', '#', '#', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'o', '#', '#', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#']
        self.assertEqual(board.noMovesForBoth(), True)
        # when there's no legal move for black
        board.board = [ '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', 
                        '#', 'o', 'o', 'o', 'o', 'o', 'o', 'x', 'o', '#', 
                        '#', 'o', 'x', 'o', 'o', 'o', 'o', 'x', 'o', '#', 
                        '#', 'o', 'x', 'o', 'x', 'x', 'o', 'o', 'o', '#', 
                        '#', 'o', 'x', 'o', 'o', 'x', 'x', 'o', 'x', '#', 
                        '#', 'o', 'o', 'o', 'o', 'o', 'o', 'o', '.', '#', 
                        '#', 'o', 'x', 'x', 'o', 'x', 'x', 'o', 'o', '#', 
                        '#', 'o', 'x', 'x', 'x', 'x', 'o', 'x', 'o', '#', 
                        '#', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', '#', 
                        '#', '#', '#', '#', '#', '#', '#', '#', '#', '#']
        self.assertEqual(board.noMovesForBoth(),False)
        # when there's no legal move for white
        board.board = [ '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', 
                        '#', 'x', 'x', 'x', 'o', 'o', 'x', 'x', 'o', '#', 
                        '#', 'x', 'x', 'x', 'o', 'x', 'o', 'x', 'o', '#', 
                        '#', 'x', 'x', 'x', 'x', 'x', 'o', 'o', 'o', '#', 
                        '#', 'x', 'x', '.', 'x', 'x', 'x', 'x', 'x', '#', 
                        '#', 'x', 'x', 'o', 'x', 'o', 'o', 'o', 'x', '#', 
                        '#', 'x', 'x', 'x', 'o', 'x', 'x', 'o', 'o', '#', 
                        '#', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'o', '#', 
                        '#', 'x', 'x', 'x', 'o', 'o', 'o', 'x', 'o', '#', 
                        '#', '#', '#', '#', '#', '#', '#', '#', '#', '#']
        self.assertEqual(board.noMovesForBoth(),False)
        # random state
        board.board = ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '.', 'o', 'o', 'x', '.', '.', '.', '.', '#', '#', '.', '.', 'o', 'o', 'x', '.', '.', '.', '#', '#', '.', 'o', '.', 'x', 'x', 'x', 'x', '.', '#', '#', 'o', '.', 'x', 'x', 'x', 'o', 'o', '.', '#', '#', '.', '.', '.', 'o', 'x', 'o', 'o', '.', '#', '#', '.', '.', 'o', '.', 'o', '.', '.', 'o', '#', '#', '.', 'o', '.', 'o', '.', 'x', '.', '.', '#', '#', 'o', '.', '.', '.', '.', '.', '.', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#']
        self.assertEqual(board.noMovesForBoth(), False)

    # no used
    def test_setBothColor(self):
        pass



    def test_initBoard(self):
        test_init = ReversiBoard(8)
        first = ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#', '.', '.', '.', 'o', 'x', '.', '.', '.', '#', '#', '.', '.', '.', 'x', 'o', '.', '.', '.', '#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#']

        self.assertCountEqual(test_init.board, first)

    def test_get_twoD_board(self):
        # random state
        board.board = [ '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', 
                        '#', '.', '.', '.', '.', '.', '.', '.', '.', '#',
                        '#', '.', '.', '.', 'o', '.', '.', '.', '.', '#', 
                        '#', '.', '.', 'o', 'o', 'o', '.', '.', '.', '#', 
                        '#', '.', '.', '.', 'x', 'x', 'o', '.', '.', '#', 
                        '#', '.', '.', '.', 'x', 'x', '.', '.', '.', '#', 
                        '#', '.', '.', '.', '.', 'x', '.', '.', '.', '#', 
                        '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', 
                        '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', 
                        '#', '#', '#', '#', '#', '#', '#', '#', '#', '#']
        correct =[  ['.', '.', '.', '.', '.', '.', '.', '.'], 
                    ['.', '.', '.', 'o', '.', '.', '.', '.'], 
                    ['.', '.', 'o', 'o', 'o', '.', '.', '.'], 
                    ['.', '.', '.', 'x', 'x', 'o', '.', '.'], 
                    ['.', '.', '.', 'x', 'x', '.', '.', '.'], 
                    ['.', '.', '.', '.', 'x', '.', '.', '.'], 
                    ['.', '.', '.', '.', '.', '.', '.', '.'], 
                    ['.', '.', '.', '.', '.', '.', '.', '.']]
        self.assertCountEqual(board.get_twoD_board(), correct)


    def test_point2position(self):
        # random point
        self.assertEqual(board.point2position(21), "b1" )
        # last point
        self.assertEqual(board.point2position(78), "g8")
        # invalid point
        self.assertRaises(AssertionError, board.point2position, -99) 
        # invalid point
        self.assertRaises(AssertionError, board.point2position, 99) 


    def test_getScore(self):
        # all white
        board.board = [ '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', 
                        '#', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', '#', 
                        '#', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', '#', 
                        '#', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', '#', 
                        '#', 'o', 'o', 'o', 'o', 'o', 'o', 'o', '.', '#', 
                        '#', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', '#', 
                        '#', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', '#', 
                        '#', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', '#',
                        '#', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', '#',  
                        '#', '#', '#', '#', '#', '#', '#', '#', '#', '#']
        self.assertEqual(board.getScore(WHITE), 63)
        self.assertEqual(board.getScore(BLACK), 0)
        # random 
        board.board = [ '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', 
                        '#', '.', 'x', 'x', 'x', 'x', 'x', 'x', '.', '#',
                        '#', '.', '.', 'x', 'x', 'o', '.', '.', '.', '#', 
                        '#', 'x', 'x', 'x', 'o', 'o', '.', '.', 'o', '#', 
                        '#', 'x', 'x', 'x', 'x', 'o', 'o', 'o', 'o', '#', 
                        '#', 'x', 'x', 'o', 'x', 'x', 'o', 'o', 'o', '#', 
                        '#', 'x', 'o', 'x', 'x', 'x', 'o', 'o', '.', '#', 
                        '#', 'o', 'o', 'o', 'x', 'o', 'o', '.', '.', '#', 
                        '#', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', '#', 
                        '#', '#', '#', '#', '#', '#', '#', '#', '#', '#']
        self.assertEqual(board.getScore(WHITE), 28)
        self.assertEqual(board.getScore(BLACK), 24)



    def test_isPostionValid(self):
        # random state
        board.board = [ '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', 
                        '#', 'o', '.', 'o', 'o', 'o', 'o', 'o', 'o', '#', 
                        '#', 'o', 'o', 'o', 'o', 'x', 'x', 'o', 'x', '#', 
                        '#', 'o', 'x', 'o', 'x', 'o', 'o', 'o', 'o', '#', 
                        '#', 'o', 'o', 'x', 'o', 'o', 'x', 'o', 'o', '#', 
                        '#', 'o', 'x', 'o', 'x', 'o', 'x', 'o', 'o', '#', 
                        '#', 'o', 'o', 'o', 'x', 'x', 'x', 'o', 'o', '#', 
                        '#', 'o', 'o', 'x', 'x', 'x', 'x', 'o', 'o', '#', 
                        '#', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', '#', 
                        '#', '#', '#', '#', '#', '#', '#', '#', '#', '#']
        self.assertCountEqual(board.isPositionValid("b2", BLACK), [True, [2,5]])
        # invalid input
        board.board = [ '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', 
                        '#', 'o', '.', 'o', 'o', 'o', 'o', 'o', 'o', '#', 
                        '#', 'o', 'o', 'o', 'o', 'x', 'x', 'o', 'x', '#', 
                        '#', 'o', 'x', 'o', 'x', 'o', 'o', 'o', 'o', '#', 
                        '#', 'o', 'o', 'x', 'o', 'o', 'x', 'o', 'o', '#', 
                        '#', 'o', 'x', 'o', 'x', 'o', 'x', 'o', 'o', '#', 
                        '#', 'o', 'o', 'o', 'x', 'x', 'x', 'o', 'o', '#', 
                        '#', 'o', 'o', 'x', 'x', 'x', 'x', 'o', 'o', '#', 
                        '#', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', '#', 
                        '#', '#', '#', '#', '#', '#', '#', '#', '#', '#']
        
        self.assertRaises(AssertionError, board.isPositionValid, "r3", WHITE)
        self.assertRaises(AssertionError, board.isPositionValid, "r4","random")
        self.assertRaises(AssertionError, board.isPositionValid, "b2", "s")
        # no legal move
        board.board = [ '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', 
                        '#', '.', '.', '.', 'o', 'o', 'o', 'o', 'o', '#', 
                        '#', '.', 'x', 'x', 'x', 'x', 'o', 'o', 'x', '#', 
                        '#', 'x', 'o', 'o', 'x', 'o', 'o', 'o', 'o', '#', 
                        '#', 'o', 'o', 'o', 'x', 'o', 'x', 'o', 'o', '#', 
                        '#', 'o', 'o', 'x', 'o', 'x', 'o', 'o', 'o', '#', 
                        '#', 'o', 'o', 'x', 'x', 'o', 'o', 'o', 'o', '#', 
                        '#', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', '#', 
                        '#', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', '#', 
                        '#', '#', '#', '#', '#', '#', '#', '#', '#', '#']
        self.assertCountEqual(board.isPositionValid("b1", BLACK), [False, None])





    def test_genMove(self):
        # random state
        board.board = ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#', '.', '.', '.', '.', 'x', 'o', '.', '.', '#', '#', '.', '.', '.', 'x', 'o', 'o', '.', '.', '#', '#', 'o', 'o', 'x', 'x', 'x', 'o', '.', '.', '#', '#', '.', 'o', '.', 'x', 'o', 'x', '.', '.', '#', '#', '.', '.', 'o', 'x', '.', 'o', 'x', 'o', '#', '#', '.', '.', '.', '.', '.', '.', '.', 'o', '#', '#', '.', '.', '.', '.', '.', '.', '.', 'o', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#']
        correct = [16, 17, 27, 37, 47, 61, 62, 65, 72, 76, 77]
        self.assertIn(board.genMove(BLACK), correct)
        # no legal move for white
        board.board = [ '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', 
                        '#', 'x', 'x', 'x', 'o', 'o', 'x', 'x', 'o', '#', 
                        '#', 'x', 'x', 'x', 'o', 'x', 'o', 'x', 'o', '#', 
                        '#', 'x', 'x', 'x', 'x', 'x', 'o', 'o', 'o', '#', 
                        '#', 'x', 'x', '.', 'x', 'x', 'x', 'x', 'x', '#', 
                        '#', 'x', 'x', 'o', 'x', 'o', 'o', 'o', 'x', '#', 
                        '#', 'x', 'x', 'x', 'o', 'x', 'x', 'o', 'o', '#', 
                        '#', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'o', '#', 
                        '#', 'x', 'x', 'x', 'o', 'o', 'o', 'x', 'o', '#', 
                        '#', '#', '#', '#', '#', '#', '#', '#', '#', '#']
        self.assertFalse(board.genMove(WHITE))



    def test_playMove(self):
        # start state
        board.board = [ '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', 
                        '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', 
                        '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', 
                        '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', 
                        '#', '.', '.', '.', 'o', 'x', '.', '.', '.', '#', 
                        '#', '.', '.', '.', 'x', 'o', '.', '.', '.', '#', 
                        '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', 
                        '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', 
                        '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', 
                        '#', '#', '#', '#', '#', '#', '#', '#', '#', '#']
        result = [  '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', 
                    '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', 
                    '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', 
                    '#', '.', '.', '.', 'x', '.', '.', '.', '.', '#', 
                    '#', '.', '.', '.', 'x', 'x', '.', '.', '.', '#', 
                    '#', '.', '.', '.', 'x', 'o', '.', '.', '.', '#', 
                    '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', 
                    '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', 
                    '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', 
                    '#', '#', '#', '#', '#', '#', '#', '#', '#', '#']
        board.playMove(34, BLACK)
        self.assertCountEqual(board.board, result)
        # input not valid
        self.assertRaises(AssertionError, board.playMove, 99, WHITE)
        self.assertRaises(AssertionError, board.playMove, 32, "random")
        self.assertRaises(AssertionError, board.playMove, 99, "random")


    def test_undo(self):
        result = [  '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', 
                    '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', 
                    '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', 
                    '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', 
                    '#', '.', '.', '.', 'o', 'x', '.', '.', '.', '#', 
                    '#', '.', '.', '.', 'x', 'o', '.', '.', '.', '#', 
                    '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', 
                    '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', 
                    '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', 
                    '#', '#', '#', '#', '#', '#', '#', '#', '#', '#']
        board.undo()
        self.assertCountEqual(board.board, result)



    def test_getWinner(self):
        # white wins
        board.board = [ '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', 
                        '#', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', '#', 
                        '#', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', '#', 
                        '#', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', '#', 
                        '#', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', '#', 
                        '#', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', '#', 
                        '#', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', '#', 
                        '#', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', '#',
                        '#', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', '#',  
                        '#', '#', '#', '#', '#', '#', '#', '#', '#', '#']
        self.assertEqual(board.getWinner(), WHITE)
        # black wins
        board.board = ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'o', '#', '#', 'x', 'x', 'x', 'o', 'o', 'o', 'x', 'o', '#', '#', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'o', '#', '#', 'x', 'x', 'x', 'o', 'x', 'o', 'x', 'o', '#', '#', 'x', 'x', 'o', 'x', 'o', 'x', 'x', 'o', '#', '#', 'x', 'o', 'x', 'o', 'o', 'x', 'x', 'o', '#', '#', 'o', 'o', 'o', 'o', 'o', 'o', 'x', 'o', '#', '#', 'x', 'x', 'x', 'x', 'x', 'x', 'o', 'o', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#']
        self.assertEqual(board.getWinner(), BLACK)
        # tie
        board.board = [ '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', 
                        '#', 'o', 'o', 'o', 'o', 'x', 'x', 'x', 'x', '#', 
                        '#', 'o', 'o', 'o', 'o', 'x', 'x', 'x', 'x', '#', 
                        '#', 'o', 'o', 'o', 'o', 'x', 'x', 'x', 'x', '#', 
                        '#', 'o', 'o', 'o', 'o', 'x', 'x', 'x', 'x', '#', 
                        '#', 'o', 'o', 'o', 'o', 'x', 'x', 'x', 'x', '#', 
                        '#', 'o', 'o', 'o', 'o', 'x', 'x', 'x', 'x', '#', 
                        '#', 'o', 'o', 'o', 'o', 'x', 'x', 'x', 'x', '#',
                        '#', 'o', 'o', 'o', 'o', 'x', 'x', 'x', 'x', '#',  
                        '#', '#', '#', '#', '#', '#', '#', '#', '#', '#']
        self.assertEqual(board.getWinner(), "Tie")

