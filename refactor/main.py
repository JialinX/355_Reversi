from board import ReversiBoard
from reversi import AlphaBeta
BLACK = 'x' # player black
WHITE = 'o' # player white
EMPTY = '.'
BORDER = '#'

def printMenu():
    print('  h            help menu')
    print('  b            board')
    print('  x a2         play x at a2')
    print('  o g3         play o at g3')
    print('  g x/o        genmove for x/o')
    print('  l x/o        show legal moves for x/o')
    print('  u            undo')

def playCommand(board, point, alphabeta, color, humanColor):

    moves = board.getLegalMoves(color)
    if color == board.computerColor:
        print("You cannot play as computer's color")
        return

    if not moves:
        print(f"There is no legal moves for {color} It has to pass")
        return

    if point in moves:
        board.playMove(point, color)
        board.showBoard()
    else:
        print(f"Invalid position for {color}, please select from following moves")
        showLegalMove(color)
        return
    if humanColor == color:
        _, move = alphabeta.genMove(board.computerColor)
        if move is None:
            print("computer has no legal move, then computer passes")
            return
        board.playMove(move, board.computerColor)
        print("Computer's turn: ")
        board.showBoard()
        print(f"Computer played at {board.point2position(move)}")

def showLegalMove(board, color):

    moves = board.getLegalMoves(color)
    if len(moves) == 0:
        print("You have no legal moves")
        return False
    else:
        allMoves = " ".join([board.point2position(move) for move in moves])
        print(f"All legal moves for {color} are: {allMoves}")
        return True

def getHumanColor():

    while True:
        print("Do you wanna play against computer? (y/n)")
        print("If y(es), computer will play with you")
        print("If n(o), the board is just for testing or pvp use")
        pve = input(">> ")
        if pve[0].lower() == 'y':
            print("x goes first, o goes second")
            color = input("What color do you want to use? (x/o): ")
            while color[0].lower() not in [BLACK,WHITE,'w','b']:
                color = input("Invalid, input, please input again: ")
            if color[0] in [BLACK,'b']:
                return BLACK
            else:
                return WHITE

        elif pve[0].lower() == 'n':
            return None
        
        else:
            print("Invalid input, please input again")


def dealCommand(commands, board, alphabeta, humanColor):

    if commands[0] == 'h':
        printMenu()

    elif commands[0] == 'b':
        board.showBoard()

    elif commands[0] in [BLACK, WHITE]:
        _, position = commands.split()
        color = commands[0]
        point = board.position2point(position)
        playCommand(board, point, alphabeta, color, humanColor)

    elif commands[0] == 'g':
        _, color = commands.split()
        _, move = alphabeta.genMove(color)
        if move is not None:
            print(f"The best move found by AlphaBeta is {board.point2position(move)}")
        else:
            print("There are no move generated by Alphabeta")

    elif commands[0] == 'l':
        _, color = commands.split()
        showLegalMove(board, color)

    elif commands[0] == 'u':
        board.undo()
        board.showBoard()

    elif commands[0] == 'q':
        print("Bye...:)")
        return False

    else:
        print("Invalid command, plese input again.") 

    return True

def main():

    board = ReversiBoard(8)
    board.showBoard()
    alphabeta = AlphaBeta(board)
    humanColor = getHumanColor()
    board.setBothColor(humanColor)

    if humanColor == WHITE:
        comMove = alphabeta.genMove(board.computerColor)
        board.playMove(comMove,BLACK)
    while not board.isEnd():
        board.showBoard()
        command = input("Commands>> ")
        toGo = dealCommand(command, board, alphabeta, humanColor)
        if not toGo:
            break

main()
